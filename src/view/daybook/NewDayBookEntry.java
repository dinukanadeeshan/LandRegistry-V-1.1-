/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view.daybook;

import controller.BookTypeController;
import controller.ClientController;
import controller.DayBookController;
import controller.NatureController;
import controller.NotryController;
import java.awt.Container;
import java.awt.Font;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Popup;
import javax.swing.Timer;
import model.Client;
import model.DayBook;
import model.Deed;
import model.Nature;
import model.Notry;
import model.User;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import others.ComboSearchNew;
import others.IdGen;
import others.Validation;
import view.notry.AddNotry;
import view.registration.NewRegistration;

/**
 *
 * @author Dinuka
 */
public class NewDayBookEntry extends javax.swing.JDialog {

    /**
     * Creates new form NewDayBookEntry
     */
    Timer timer;
    Date date;
    DateFormat dateFormat;
    DateFormat timeFormat;
    NumberFormat numberFormat;
    private Popup popup;
    Frame parent;
    NewRegistration dialog;
    String bookType;
    Client client;
    User user;
    private PasswordDialog passwordDialog;

    public NewDayBookEntry() {
    }

    @SuppressWarnings("empty-statement")
    public NewDayBookEntry(java.awt.Frame parent, boolean modal, User user) {
        super(parent, modal);
        this.parent = parent;
        this.user = user;
        initObject();
    }

    public NewDayBookEntry(java.awt.Frame parent, boolean modal, JDialog dialog, User user, String bookType) {
        super(parent, modal);
        this.parent = parent;
        this.user = user;
        this.dialog = (NewRegistration) dialog;

        initObject();
        bookTypeCombo.setSelectedIndex(bookType.equals("LDO") ? 1 : 0);
        codeText.requestFocus();
    }

    private void initObject() {
        
        setLocation(475, 105);
        initComponents();
        date = new Date();
        dateFormat = DateFormat.getDateInstance(DateFormat.MEDIUM);
        dateText.setText(dateFormat.format(date));
        timeFormat = DateFormat.getTimeInstance(DateFormat.MEDIUM);
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                date = new Date();

                timeText.setText(timeFormat.format(date));
            }
        });
        timer.start();

        deedDateCalenderCombo.setDateFormat(dateFormat);
//            System.out.println(date.getHours()+":"+date.getMinutes()+":"+date.getSeconds());
        try {
            initBookTypeComboBox();
            initNatureComboBox();
            initNotryComboBox();
            iniLanguageComboBox();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
//        new ComboSearchNew().setSearchableCombo(bookTypeCombo, true, "No Matches Founds..", natureComboBox);
        new ComboSearchNew().setSearchableCombo(natureComboBox, true, "No Matches Founds..", deedDateCalenderCombo);
        new ComboSearchNew().setSearchableCombo(notryComboBox, true, "No Matches Founds..", notryNoText);
        new ComboSearchNew().setSearchableCombo(languageComboBox, true, "No Matches Founds..", noOfLandsSpinner);
        bookTypeCombo.setSelectedItem("General");
        natureComboBox.setSelectedItem(null);
        notryComboBox.setSelectedItem(null);
        officeText.setText("");
        regDutyText.setText("0.00");
        bookTypeCombo.requestFocus();

        System.out.println(deedDateCalenderCombo.getModel().getSelectedItem());
        numberFormat = NumberFormat.getCurrencyInstance();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        deedPanel = new javax.swing.JPanel();
        natureLabel = new javax.swing.JLabel();
        natureComboBox = new javax.swing.JComboBox();
        notryLabel = new javax.swing.JLabel();
        notryComboBox = new javax.swing.JComboBox();
        deedNoLabel = new javax.swing.JLabel();
        notryNoText = new javax.swing.JTextField();
        deedDateLabel = new javax.swing.JLabel();
        deedDateCalenderCombo = new org.freixas.jcalendar.JCalendarCombo();
        languageLabel = new javax.swing.JLabel();
        languageComboBox = new javax.swing.JComboBox();
        valueLabel = new javax.swing.JLabel();
        valueText = new javax.swing.JTextField();
        regDutyLabel = new javax.swing.JLabel();
        regDutyText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        noOfLandsSpinner = new javax.swing.JSpinner();
        officeLabel = new javax.swing.JLabel();
        officeText = new javax.swing.JTextField();
        regReferencePanel = new javax.swing.JPanel();
        volumeLabel = new javax.swing.JLabel();
        volumeText = new javax.swing.JTextField();
        folioLabel = new javax.swing.JLabel();
        folioText = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        codeText = new javax.swing.JTextField();
        codeLabel = new javax.swing.JLabel();
        clientNameLabel = new javax.swing.JLabel();
        clientNameText = new javax.swing.JTextField();
        addressText = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        warningLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        bookTypeLabel = new javax.swing.JLabel();
        bookTypeCombo = new javax.swing.JComboBox();
        timeText = new javax.swing.JTextField();
        dayBookNoLabel = new javax.swing.JLabel();
        dayBookNoText = new javax.swing.JTextField();
        dateText = new javax.swing.JTextField();
        dateLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Day Book");
        setFont(new java.awt.Font("Leelawadee", 3, 14)); // NOI18N
        setMinimumSize(new java.awt.Dimension(2, 2));
        setPreferredSize(new java.awt.Dimension(710, 625));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Vani", 0, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Day Book Entry");

        saveButton.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/images/document-save-5.png"))); // NOI18N
        saveButton.setText("Save ");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        deedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Deed Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 3, 16))); // NOI18N
        deedPanel.setPreferredSize(new java.awt.Dimension(695, 222));
        deedPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deedPanelMouseClicked(evt);
            }
        });
        deedPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        natureLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        natureLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        natureLabel.setText("Nature");
        deedPanel.add(natureLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 89, 72, -1));

        natureComboBox.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        natureComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        natureComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                natureComboBoxActionPerformed(evt);
            }
        });
        natureComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                natureComboBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                natureComboBoxFocusLost(evt);
            }
        });
        natureComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                natureComboBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                natureComboBoxKeyReleased(evt);
            }
        });
        deedPanel.add(natureComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, 189, -1));

        notryLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        notryLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        notryLabel.setText("Notry");
        deedPanel.add(notryLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 30, 100, 23));

        notryComboBox.setEditable(true);
        notryComboBox.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        notryComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        notryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notryComboBoxActionPerformed(evt);
            }
        });
        notryComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                notryComboBoxFocusLost(evt);
            }
        });
        notryComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                notryComboBoxKeyPressed(evt);
            }
        });
        deedPanel.add(notryComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 189, -1));

        deedNoLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        deedNoLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        deedNoLabel.setText("Deed No");
        deedPanel.add(deedNoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 59, 92, 23));

        notryNoText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        notryNoText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notryNoTextActionPerformed(evt);
            }
        });
        notryNoText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                notryNoTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                notryNoTextKeyReleased(evt);
            }
        });
        deedPanel.add(notryNoText, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 189, -1));

        deedDateLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        deedDateLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        deedDateLabel.setText("Deed Date");
        deedPanel.add(deedDateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 92, 24));

        deedDateCalenderCombo.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        deedDateCalenderCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deedDateCalenderComboMouseEntered(evt);
            }
        });
        deedDateCalenderCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deedDateCalenderComboActionPerformed(evt);
            }
        });
        deedDateCalenderCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                deedDateCalenderComboFocusLost(evt);
            }
        });
        deedDateCalenderCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deedDateCalenderComboKeyPressed(evt);
            }
        });
        deedPanel.add(deedDateCalenderCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, 224, 30));

        languageLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        languageLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        languageLabel.setText("Language");
        deedPanel.add(languageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(341, 90, 86, 20));

        languageComboBox.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        languageComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        languageComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageComboBoxActionPerformed(evt);
            }
        });
        deedPanel.add(languageComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 90, 193, -1));

        valueLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        valueLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        valueLabel.setText("Value");
        deedPanel.add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 77, 25));

        valueText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        valueText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueTextActionPerformed(evt);
            }
        });
        valueText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                valueTextFocusLost(evt);
            }
        });
        valueText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                valueTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                valueTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                valueTextKeyTyped(evt);
            }
        });
        deedPanel.add(valueText, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, 186, -1));

        regDutyLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        regDutyLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        regDutyLabel.setText("Reg. Duty");
        deedPanel.add(regDutyLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(338, 186, 90, -1));

        regDutyText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        regDutyText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        regDutyText.setText("0.00");
        regDutyText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regDutyTextActionPerformed(evt);
            }
        });
        deedPanel.add(regDutyText, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 180, 193, -1));

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("No Of Lands ");
        deedPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, 21));

        noOfLandsSpinner.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        noOfLandsSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 100, 1));
        noOfLandsSpinner.setFocusCycleRoot(true);
        noOfLandsSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                noOfLandsSpinnerStateChanged(evt);
            }
        });
        noOfLandsSpinner.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                noOfLandsSpinnerKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                noOfLandsSpinnerKeyReleased(evt);
            }
        });
        deedPanel.add(noOfLandsSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 72, -1));

        officeLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        officeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        officeLabel.setText("Office");
        deedPanel.add(officeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(356, 28, 71, -1));

        officeText.setEditable(false);
        officeText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        officeText.setFocusable(false);
        officeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                officeTextActionPerformed(evt);
            }
        });
        deedPanel.add(officeText, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 30, 193, -1));

        regReferencePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Registration Reference", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 3, 16))); // NOI18N

        volumeLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        volumeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        volumeLabel.setText("Volume");

        volumeText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        volumeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeTextActionPerformed(evt);
            }
        });
        volumeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                volumeTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                volumeTextKeyReleased(evt);
            }
        });

        folioLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        folioLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        folioLabel.setText("Folio");

        folioText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        folioText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                folioTextActionPerformed(evt);
            }
        });
        folioText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                folioTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                folioTextKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout regReferencePanelLayout = new javax.swing.GroupLayout(regReferencePanel);
        regReferencePanel.setLayout(regReferencePanelLayout);
        regReferencePanelLayout.setHorizontalGroup(
            regReferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(regReferencePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(volumeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(volumeText, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(folioLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(folioText, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        regReferencePanelLayout.setVerticalGroup(
            regReferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(regReferencePanelLayout.createSequentialGroup()
                .addGroup(regReferencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volumeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(volumeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(folioLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(folioText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        regReferencePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {folioText, volumeText});

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Given By", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 3, 16))); // NOI18N

        codeText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        codeText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        codeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codeTextActionPerformed(evt);
            }
        });
        codeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                codeTextKeyReleased(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codeTextKeyPressed(evt);
            }
        });

        codeLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        codeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        codeLabel.setText("Code");

        clientNameLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        clientNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        clientNameLabel.setText("Name");

        clientNameText.setEditable(false);
        clientNameText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        clientNameText.setFocusable(false);
        clientNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientNameTextActionPerformed(evt);
            }
        });
        clientNameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clientNameTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                clientNameTextKeyReleased(evt);
            }
        });

        addressText.setEditable(false);
        addressText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        addressText.setFocusable(false);
        addressText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressTextActionPerformed(evt);
            }
        });
        addressText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addressTextKeyPressed(evt);
            }
        });

        addressLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        addressLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        addressLabel.setText("Address");

        warningLabel.setFont(new java.awt.Font("Imprint MT Shadow", 0, 18)); // NOI18N
        warningLabel.setForeground(new java.awt.Color(255, 0, 51));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(codeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientNameText)
                    .addComponent(codeText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(warningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(codeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(codeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(warningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clientNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {clientNameText, codeText});

        cancelButton.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/images/edit-delete-7.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        bookTypeLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        bookTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        bookTypeLabel.setText("Book Type");

        bookTypeCombo.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        bookTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "General", "LDO" }));
        bookTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookTypeComboActionPerformed(evt);
            }
        });
        bookTypeCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                bookTypeComboKeyReleased(evt);
            }
        });

        timeText.setEditable(false);
        timeText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        timeText.setFocusable(false);

        dayBookNoLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        dayBookNoLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dayBookNoLabel.setText("Day Book No");

        dayBookNoText.setEditable(false);
        dayBookNoText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        dayBookNoText.setFocusable(false);
        dayBookNoText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayBookNoTextActionPerformed(evt);
            }
        });
        dayBookNoText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dayBookNoTextKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dayBookNoTextKeyTyped(evt);
            }
        });

        dateText.setEditable(false);
        dateText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        dateText.setFocusable(false);

        dateLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        dateLabel.setText("Date & Time");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dayBookNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(dayBookNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeText, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(bookTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookTypeLabel)
                    .addComponent(bookTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayBookNoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dayBookNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(279, 279, 279)
                .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(73, 73, 73))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(regReferencePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deedPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(regReferencePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void codeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codeTextActionPerformed

        if (codeText.getText().equals("")) {
            try {
                codeText.setText(IdGen.getNextClient());
                clientNameText.setEditable(true);
                clientNameText.setFocusable(true);
                clientNameText.setText("");
                addressText.setEditable(true);
                addressText.setFocusable(true);
                addressText.setText("");
                clientNameText.requestFocus();

            } catch (SQLException ex) {
                Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

            try {
                client = ClientController.searchClientByCode(codeText.getText());
                clientNameText.setText(client.getName());
                addressText.setText(client.getAddress());
                clientNameText.setEditable(false);
                addressText.setEditable(false);
                notryComboBox.requestFocus();
                for (int i = 0; i < notryComboBox.getItemCount(); i++) {
                    String notry = (String) notryComboBox.getItemAt(i);
                    if (notry.startsWith(client.getClientId())) {
                        notryComboBox.setSelectedIndex(i);
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {

                if (ex.getMessage().contains("empty result set")) {
                    try {
                        Notry notry = NotryController.getNotry(codeText.getText());
                        clientNameText.setText(notry.getName());
                        addressText.setText(notry.getAddress());
                        clientNameText.setEditable(false);
                        addressText.setEditable(false);
                        bookTypeCombo.requestFocus();
                        initNotryComboBox();
                        ClientController.addClient(new Client(notry.getNotryCode(), notry.getName(), notry.getAddress()));
                    } catch (ClassNotFoundException ex1) {
                        Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex1);
                    } catch (SQLException ex1) {

                        if (ex1.getMessage().contains("empty result set")) {
                            JLabel messageLabel = new JLabel("<html>No Record Found!!<br><br> Do you want to add Notry?</html>");
                            messageLabel.setFont(new Font("High Tower Text", Font.PLAIN, 18));
                            int res = JOptionPane.showConfirmDialog(this, messageLabel, "Empty results", JOptionPane.YES_NO_OPTION);
                            if (res == 0) {
                                new AddNotry(parent, true, this, codeText.getText()).setVisible(true);

                            } else if (res == 1) {
                                codeText.setText("");
                                clientNameText.setText("");
                                addressText.setText("");
                                codeText.requestFocus();
                            }
                        }
                    }
                }
            }

        }



    }//GEN-LAST:event_codeTextActionPerformed

    private void codeTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeTextKeyReleased

        try {
            String text = codeText.getText();
            if (!Validation.validateNotryCode(text)) {
                int caretPosition = codeText.getCaretPosition();
                codeText.setText(text.substring(0, caretPosition - 1) + "" + text.substring(caretPosition));
                codeText.setCaretPosition(caretPosition - 1);
            }
        } catch (Exception e) {
        }
        setSaveButtonEnability();
    }//GEN-LAST:event_codeTextKeyReleased

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (isTimeValid()) {
            saveDayBookEntry();
        } else {
           passwordDialog = new PasswordDialog(this, true, user);
           passwordDialog.setVisible(true);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void dayBookNoTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayBookNoTextActionPerformed
        codeText.requestFocus();
    }//GEN-LAST:event_dayBookNoTextActionPerformed

    private void notryNoTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_notryNoTextKeyReleased
        try {
            String text = notryNoText.getText();
            if (!Validation.validateInt(text)) {
                int caretPosition = notryNoText.getCaretPosition();
                notryNoText.setText(text.substring(0, caretPosition - 1) + "" + text.substring(caretPosition));
                notryNoText.setCaretPosition(caretPosition - 1);
            }
        } catch (Exception e) {
        }
        setSaveButtonEnability();
    }//GEN-LAST:event_notryNoTextKeyReleased

    private void valueTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueTextActionPerformed
        if (Integer.parseInt(noOfLandsSpinner.getValue().toString()) > 1) {
            saveButton.doClick();
        } else {
            volumeText.requestFocus();
        }


    }//GEN-LAST:event_valueTextActionPerformed

    private void deedPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deedPanelMouseClicked
    }//GEN-LAST:event_deedPanelMouseClicked

    private void valueTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valueTextKeyTyped
    }//GEN-LAST:event_valueTextKeyTyped

    private void valueTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valueTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            noOfLandsSpinner.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            regDutyText.requestFocus();
        }
        try {
            popup.hide();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_valueTextKeyPressed

    private void codeTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codeTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            bookTypeCombo.requestFocus();
        }
    }//GEN-LAST:event_codeTextKeyPressed

    private void notryNoTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notryNoTextActionPerformed
        natureComboBox.requestFocus();
    }//GEN-LAST:event_notryNoTextActionPerformed

    private void deedDateCalenderComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deedDateCalenderComboActionPerformed

    }//GEN-LAST:event_deedDateCalenderComboActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        System.out.println(evt.getX() + "   " + evt.getY());
    }//GEN-LAST:event_formMouseClicked

    private void folioTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_folioTextKeyReleased
        try {
            String text = folioText.getText();
            if (!Validation.validateInt(text)) {
                int caretPosition = folioText.getCaretPosition();
                folioText.setText(text.substring(0, caretPosition - 1) + "" + text.substring(caretPosition));
                folioText.setCaretPosition(caretPosition - 1);
            }
        } catch (Exception e) {
        }
        setSaveButtonEnability();
    }//GEN-LAST:event_folioTextKeyReleased

    private void valueTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valueTextKeyReleased
        try {
            String text = valueText.getText();
            if (!Validation.validateValueInt(text)) {
                int caretPosition = valueText.getCaretPosition();
                valueText.setText(text.substring(0, caretPosition - 1) + "" + text.substring(caretPosition));
                valueText.setCaretPosition(caretPosition - 1);
            }

        } catch (Exception e) {
        }
        setSaveButtonEnability();
    }//GEN-LAST:event_valueTextKeyReleased

    private void dayBookNoTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dayBookNoTextKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_dayBookNoTextKeyTyped

    private void dayBookNoTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dayBookNoTextKeyReleased
        try {
            String text = dayBookNoText.getText();
            if (!Validation.validateInt(text)) {
                dayBookNoText.setText(text.substring(0, text.length() - 1));
            }
        } catch (Exception e) {
        }
        setSaveButtonEnability();
    }//GEN-LAST:event_dayBookNoTextKeyReleased

    private void volumeTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_volumeTextKeyReleased
        setSaveButtonEnability();
    }//GEN-LAST:event_volumeTextKeyReleased

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
        System.out.println();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void noOfLandsSpinnerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noOfLandsSpinnerKeyReleased
    }//GEN-LAST:event_noOfLandsSpinnerKeyReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        timer.stop();
    }//GEN-LAST:event_formWindowClosing

    private void volumeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeTextActionPerformed
        folioText.requestFocus();
    }//GEN-LAST:event_volumeTextActionPerformed

    private void noOfLandsSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_noOfLandsSpinnerStateChanged
        int value = Integer.parseInt(noOfLandsSpinner.getValue().toString());
        if (value > 1) {
            volumeText.setEnabled(false);
            folioText.setEnabled(false);

        } else {
            volumeText.setEnabled(true);
            folioText.setEnabled(true);

        }
    }//GEN-LAST:event_noOfLandsSpinnerStateChanged

    private void folioTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_folioTextActionPerformed
        saveButton.doClick();
    }//GEN-LAST:event_folioTextActionPerformed

    private void clientNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientNameTextActionPerformed
        if (!clientNameText.getText().equals("")) {
            addressText.requestFocus();
        } else {
            warningLabel.setText("Enter Client's Name..");
        }
    }//GEN-LAST:event_clientNameTextActionPerformed

    private void addressTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressTextActionPerformed
        if (!addressText.getText().equals("")) {
            notryComboBox.requestFocus();
        } else {
            warningLabel.setText("Enter Address..");
        }
    }//GEN-LAST:event_addressTextActionPerformed

    private void clientNameTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientNameTextKeyReleased
        try {
            String text = clientNameText.getText();
            if (!Validation.validateName(text)) {
                clientNameText.setText(text.substring(0, text.length() - 1));
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_clientNameTextKeyReleased

    private void natureComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_natureComboBoxActionPerformed
        try {
            double registrationDuty = 0;
            try {
                registrationDuty = NatureController.searchNature(NatureController.getNatureCode(natureComboBox.getSelectedItem().toString())).getRegistrationDuty();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
            }
            regDutyText.setText(numberFormat.format(registrationDuty).substring(1));
        } catch (NullPointerException e) {
        }

    }//GEN-LAST:event_natureComboBoxActionPerformed

    private void natureComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_natureComboBoxFocusLost
        try {
            double registrationDuty = ((Nature) natureComboBox.getSelectedItem()).getRegistrationDuty();
            regDutyText.setText(String.valueOf(registrationDuty));
        } catch (NullPointerException e) {
        }

    }//GEN-LAST:event_natureComboBoxFocusLost

    private void bookTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookTypeComboActionPerformed
        if (bookTypeCombo.getSelectedIndex() == 0) {
            try {
                dayBookNoText.setText(IdGen.getNextDayBookNo("G", String.valueOf(date.getYear()).substring(String.valueOf(date.getYear()).length() - 2)));
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                dayBookNoText.setText(IdGen.getNextDayBookNo("L", String.valueOf(date.getYear()).substring(String.valueOf(date.getYear()).length() - 2)));
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_bookTypeComboActionPerformed

    private void bookTypeComboKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookTypeComboKeyReleased
        if (evt.getKeyCode() == 10) {
            codeText.requestFocus();
        }
    }//GEN-LAST:event_bookTypeComboKeyReleased

    private void officeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_officeTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_officeTextActionPerformed

    private void notryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notryComboBoxActionPerformed
        try {
            officeText.setText(NotryController.getOffice(((String) notryComboBox.getSelectedItem()).split(" - ")[0]));
        } catch (Exception e) {
        }

    }//GEN-LAST:event_notryComboBoxActionPerformed

    private void natureComboBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_natureComboBoxFocusGained
    }//GEN-LAST:event_natureComboBoxFocusGained

    private void valueTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valueTextFocusGained
    }//GEN-LAST:event_valueTextFocusGained

    private void valueTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valueTextFocusLost
        String text = valueText.getText();
        valueText.setText(numberFormat.format(Double.parseDouble(text)).substring(1));
    }//GEN-LAST:event_valueTextFocusLost

    private void notryComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_notryComboBoxFocusLost
    }//GEN-LAST:event_notryComboBoxFocusLost

    private void regDutyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regDutyTextActionPerformed
        volumeText.requestFocus();
    }//GEN-LAST:event_regDutyTextActionPerformed

    private void volumeTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_volumeTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            valueText.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            regDutyText.requestFocus();
        }
    }//GEN-LAST:event_volumeTextKeyPressed

    private void folioTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_folioTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            volumeText.requestFocus();
        }
    }//GEN-LAST:event_folioTextKeyPressed

    private void natureComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_natureComboBoxKeyPressed
    }//GEN-LAST:event_natureComboBoxKeyPressed

    private void addressTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            clientNameText.requestFocus();
        }
        warningLabel.setText("");
    }//GEN-LAST:event_addressTextKeyPressed

    private void clientNameTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientNameTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            codeText.requestFocus();
        }
        warningLabel.setText("");
    }//GEN-LAST:event_clientNameTextKeyPressed

    private void notryComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_notryComboBoxKeyPressed
//        if (evt.getKeyCode() == KeyEvent.VK_UP) {
//            natureComboBox.requestFocus();
//        }
//        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
//            natureComboBox.requestFocus();
//        }
        if (evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_UP) {
            if (!addressText.isEditable()) {
                codeText.requestFocus();
            } else {
                addressText.requestFocus();
            }
        }
    }//GEN-LAST:event_notryComboBoxKeyPressed

    private void notryNoTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_notryNoTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            notryComboBox.requestFocus();
        }
    }//GEN-LAST:event_notryNoTextKeyPressed

    private void deedDateCalenderComboMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deedDateCalenderComboMouseEntered
//        deedDateCalenderCombo.showPopup();
    }//GEN-LAST:event_deedDateCalenderComboMouseEntered

    private void deedDateCalenderComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deedDateCalenderComboKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            deedDateCalenderCombo.showPopup();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            noOfLandsSpinner.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            if (deedDateCalenderCombo.isPopupVisible()) {
                deedDateCalenderCombo.hidePopup();
            } else {
                natureComboBox.requestFocus();
            }
        }

    }//GEN-LAST:event_deedDateCalenderComboKeyPressed

    private void languageComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_languageComboBoxActionPerformed

    private void natureComboBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_natureComboBoxKeyReleased
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            deedDateCalenderCombo.requestFocus();
//        }
    }//GEN-LAST:event_natureComboBoxKeyReleased

    private void noOfLandsSpinnerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noOfLandsSpinnerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            valueText.requestFocus();
        }
    }//GEN-LAST:event_noOfLandsSpinnerKeyPressed

    private void deedDateCalenderComboFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deedDateCalenderComboFocusLost
        Date deedDate = deedDateCalenderCombo.getDate();
        Date today = new Date();
        if (!(deedDate.getYear() <= today.getYear() && deedDate.getMonth() <= today.getMonth() && deedDate.getDate() <= today.getDate())) {
            deedDateCalenderCombo.requestFocus();
        }     
    }//GEN-LAST:event_deedDateCalenderComboFocusLost
    /**
     *
     * @return validation of the time for Enter DayBook
     */
    public boolean isTimeValid() {
        int hour = date.getHours();
        int minute = date.getMinutes();
        boolean isValid = false;
        if (hour >= 9 && hour <= 15) {
            isValid = true;
            if (hour == 15 && minute >= 45) {
                isValid = false;
            }
        }
        return isValid;
    }

    public void setClient() {
        codeText.postActionEvent();

    }

    private void initBookTypeComboBox() throws ClassNotFoundException, SQLException {
        ArrayList<String> deedTypes = BookTypeController.getDeedTypes();
        bookTypeCombo.removeAllItems();
        for (int i = 0; i < deedTypes.size(); i++) {
            String types = deedTypes.get(i);
            bookTypeCombo.addItem(types);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                System.out.println(info.getName() + "  " + info.getClassName());
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewDayBookEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewDayBookEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewDayBookEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewDayBookEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                NewDayBookEntry dialog = new NewDayBookEntry(new javax.swing.JFrame(), true, new User("dinuka", null, 0));
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTextField addressText;
    private javax.swing.JComboBox bookTypeCombo;
    private javax.swing.JLabel bookTypeLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel clientNameLabel;
    private javax.swing.JTextField clientNameText;
    private javax.swing.JLabel codeLabel;
    private javax.swing.JTextField codeText;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JTextField dateText;
    private javax.swing.JLabel dayBookNoLabel;
    private javax.swing.JTextField dayBookNoText;
    private org.freixas.jcalendar.JCalendarCombo deedDateCalenderCombo;
    private javax.swing.JLabel deedDateLabel;
    private javax.swing.JLabel deedNoLabel;
    private javax.swing.JPanel deedPanel;
    private javax.swing.JLabel folioLabel;
    private javax.swing.JTextField folioText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox languageComboBox;
    private javax.swing.JLabel languageLabel;
    private javax.swing.JComboBox natureComboBox;
    private javax.swing.JLabel natureLabel;
    private javax.swing.JSpinner noOfLandsSpinner;
    private javax.swing.JComboBox notryComboBox;
    private javax.swing.JLabel notryLabel;
    private javax.swing.JTextField notryNoText;
    private javax.swing.JLabel officeLabel;
    private javax.swing.JTextField officeText;
    private javax.swing.JLabel regDutyLabel;
    private javax.swing.JTextField regDutyText;
    private javax.swing.JPanel regReferencePanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField timeText;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTextField valueText;
    private javax.swing.JLabel volumeLabel;
    private javax.swing.JTextField volumeText;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables

    private void initNatureComboBox() throws SQLException, ClassNotFoundException {
        ArrayList<Nature> natureListOfDeed = NatureController.getNatureListOfDeed();
        natureComboBox.removeAllItems();
        for (int i = 0; i < natureListOfDeed.size(); i++) {
            Nature nature = natureListOfDeed.get(i);
            natureComboBox.addItem(nature);
        }

    }

    private void initNotryComboBox() throws SQLException, ClassNotFoundException {
        ArrayList<String> notryList = NotryController.getNotries();
        notryComboBox.removeAllItems();
        for (int i = 0; i < notryList.size(); i++) {
            String notry = notryList.get(i);
            notryComboBox.addItem(notry);
        }

    }

    private void iniLanguageComboBox() {
        languageComboBox.removeAllItems();
        languageComboBox.addItem("Sinhala");
        languageComboBox.addItem("English");
        languageComboBox.addItem("Tamil");
    }

    private void setSaveButtonEnability() {
        if ((dayBookNoText.getText().equals("") || codeText.getText().equals("") || clientNameText.getText().equals("")
                || addressText.getText().equals("") || notryNoText.getText().equals("") || valueText.getText().equals("")
                || volumeText.getText().equals("") || folioText.getText().equals(""))) {
            saveButton.setEnabled(false);
        } else {
            saveButton.setEnabled(true);
        }
    }

    private void setTextFieldsEmpty() {
        dayBookNoText.setText("");
        codeText.setText("");
        clientNameText.setText("");
        addressText.setText("");
        notryNoText.setText("");
        valueText.setText("");
        volumeText.setText("");
        folioText.setText("");
        officeText.setText("");
        regDutyText.setText("0.00");
        saveButton.setEnabled(false);
        notryComboBox.setSelectedIndex(-1);
        bookTypeCombo.setSelectedIndex(0);
        natureComboBox.setSelectedIndex(-1);
        languageComboBox.setSelectedIndex(0);
        codeText.requestFocus();
    }

    private void printDayBookReciept() {
        setModal(false);
        Map<String, Object> param = new HashMap<String, Object>();
        param.put("DayBookNo", dayBookNoText.getText());
        param.put("recievedDate", dateText.getText());
        param.put("clientName", clientNameText.getText());
        param.put("clientAddress", addressText.getText());
        param.put("notry", notryComboBox.getSelectedItem().toString());
        param.put("deedNo", notryNoText.getText());
        param.put("regDuty", regDutyText.getText());
        param.put("nature", natureComboBox.getSelectedItem().toString());
        param.put("bookType", bookTypeCombo.getSelectedItem().toString());
        try {
            JasperReport jasperReport = JasperCompileManager.compileReport("./src/reports/DayBookReciept.jrxml");
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, param);
            JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);
            Container contentPane = jasperViewer.getContentPane();
            JDialog jasperDialog = new JDialog(this, false);
            jasperDialog.setContentPane(contentPane);
            jasperDialog.setTitle("Print Preview");
            jasperDialog.setSize(Toolkit.getDefaultToolkit().getScreenSize());
            jasperDialog.setLocationRelativeTo(this);
            jasperDialog.setVisible(true);

        } catch (JRException ex) {
            Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    protected void saveDayBookEntry() throws HeadlessException, NumberFormatException {
        if (codeText.getText().startsWith("Ext")) {
            Client client = new Client(codeText.getText(), clientNameText.getText(), addressText.getText());
            try {
                ClientController.addClient(client);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        String dayBookNo = dayBookNoText.getText();
        String[] currDate = DateFormat.getDateInstance(DateFormat.SHORT).format(date).split("/");
        String recDate = currDate[2] + "/" + currDate[1] + "/" + currDate[0];
        String recTime = timeText.getText().substring(0, 7);
        String clientCode = codeText.getText();
        double registrationDuty = Double.parseDouble(regDutyText.getText());
        DayBook dayBook = new DayBook(dayBookNo, recDate, recTime, clientCode, registrationDuty);
        String deedId = null;
        try {
            deedId = IdGen.getNextId("Deed", "deedId", "D");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
        String refVolume = volumeText.getText();
        String refFolio = folioText.getText();
        String notryCode = notryComboBox.getSelectedItem().toString().split(" - ")[0];
        String deedType = bookTypeCombo.getSelectedItem().toString().charAt(0) + "";
        String natureCode = null;
        try {
            natureCode = NatureController.getNatureCode(natureComboBox.getSelectedItem().toString());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
        String[] dateOfDeed = DateFormat.getDateInstance(DateFormat.SHORT).format(deedDateCalenderCombo.getDate()).split("/");
        String deedDate = dateOfDeed[2] + "/" + dateOfDeed[0] + "/" + dateOfDeed[1];
        int notryNo = Integer.parseInt(notryNoText.getText());
        String mediumCode = languageComboBox.getSelectedItem().toString().charAt(0) + "";
        int noOfLands = Integer.parseInt(noOfLandsSpinner.getValue().toString());
        String value[] = valueText.getText().split(",");
        String valueOfDeed = "";
        for (int i = 0; i < value.length; i++) {
            String string = value[i];
            valueOfDeed += string;
        }
        double deedValue = Double.valueOf(valueOfDeed);
        Deed deed = new Deed(deedId, dayBookNo, refVolume, refFolio, notryCode, deedType, natureCode, deedDate, notryNo, mediumCode, noOfLands, deedValue);
        try {
            int res = DayBookController.addDayBookRecord(dayBook, deed);
            if (res > 0) {
                JLabel messageLabel = new JLabel("Saved Successfully..");
                messageLabel.setFont(new Font("High Tower Text", Font.PLAIN, 18));
                JOptionPane.showMessageDialog(this, messageLabel, "", JOptionPane.INFORMATION_MESSAGE);
                messageLabel.setText("Do you want print reciept?");
                if (JOptionPane.showConfirmDialog(this,messageLabel , "", JOptionPane.YES_NO_OPTION) == 0) {
                    if (passwordDialog != null) {
                        passwordDialog.dispose();
                    }
                    printDayBookReciept();
                }

            }

            if (dialog != null) {
                dialog.setDeedInfo(dayBookNo);
                this.dispose();
            }
            setTextFieldsEmpty();
            dayBookNoText.setText("");
            //  deedIdText.setText(IdGen.getNextId("Deed", "deedId", "D"));
            bookTypeCombo.requestFocus();
            bookTypeCombo.setSelectedIndex(0);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewDayBookEntry.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    

//    private boolean showPasswordDialog() throws SQLException, ClassNotFoundException {
//        JLabel label = new JLabel("Enter Password");
//        JPasswordField passwordField = new JPasswordField(10);
//        JPanel passwordFieldPanel = new JPanel();
//        passwordFieldPanel.add(passwordField);
//        JPanel mainPanel = new JPanel(new GridLayout(1, 2, 2, 0));
//        mainPanel.add(label);
//        mainPanel.add(passwordFieldPanel);
//        JOptionPane.showMessageDialog(this, mainPanel);
//        int privilage = UserController.searchUser(user.getUserName(), new String(passwordField.getPassword()));
//        return privilage != -1;
//    }
}
