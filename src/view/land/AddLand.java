/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view.land;

import controller.LandController;
import controller.LocalAuthorityController;
import controller.VillageController;
import java.awt.Font;
import java.awt.Frame;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import model.Boundary;
import model.Extent;
import model.Land;
import model.LocalAuthority;
import model.Plan;
import model.Village;
import others.ComboSearchNew;
import others.IdGen;
import others.Validation;
import view.localAuthority.AddLocalAuthority;
import view.registration.NewRegistration;
import view.village.AddVillage;

/**
 *
 * @author Nadeeshan
 */
public class AddLand extends javax.swing.JDialog {

    private DefaultComboBoxModel villageComboBoxModel;
    private DefaultComboBoxModel localAuthorityComboBoxModel;
    private Frame parent;
    private NewRegistration dialog;
    private String landCode;

    /**
     * Creates new form AddLand
     */
    public AddLand(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initObject();
    }

    public AddLand(java.awt.Frame parent, boolean modal, JDialog dialog, String volume, String folio) {
        super(parent, modal);
        this.parent = parent;
        this.dialog = (NewRegistration) dialog;
        initObject();
        volumeText.setText(volume);
        folioText.setText(folio);
    }

    private void initObject() {
        initComponents();
        setLocation(406, 90);
        initComboBoxes();
        try {
            new ComboSearchNew().setSearchableCombo(villageComboBox, true, "No Matches Founds..", acreText);
            new ComboSearchNew().setSearchableCombo(localAuthorityComboBox, true, "No Matches Founds..", villageComboBox);

        } catch (Exception e) {
        }
        nameText.requestFocus();
        try {
            landCode = IdGen.getNextId("Land", "landCode", "L");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * ^
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newLandPanel = new javax.swing.JPanel();
        newTitleLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        localAuthorityLabel = new javax.swing.JLabel();
        localAuthorityComboBox = new javax.swing.JComboBox();
        addVillageButton = new javax.swing.JButton();
        villageLabel = new javax.swing.JLabel();
        villageComboBox = new javax.swing.JComboBox();
        extentLabel = new javax.swing.JLabel();
        perchLabel = new javax.swing.JLabel();
        roodLabel = new javax.swing.JLabel();
        acreLabel = new javax.swing.JLabel();
        acreText = new javax.swing.JTextField();
        roodText = new javax.swing.JTextField();
        perchText = new javax.swing.JTextField();
        boundaryLabel = new javax.swing.JLabel();
        northLabel = new javax.swing.JLabel();
        northText = new javax.swing.JTextField();
        westText = new javax.swing.JTextField();
        westLabel = new javax.swing.JLabel();
        eastLabel = new javax.swing.JLabel();
        eastText = new javax.swing.JTextField();
        southText = new javax.swing.JTextField();
        southLabel = new javax.swing.JLabel();
        lotNoLabel = new javax.swing.JLabel();
        lotNoText = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        volumeLabel = new javax.swing.JLabel();
        volumeText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        folioText = new javax.swing.JTextField();
        splitedLandCheckBox = new javax.swing.JCheckBox();
        splitedFromLabel = new javax.swing.JLabel();
        parentLandVolumeText = new javax.swing.JTextField();
        parentLandFolioLable = new javax.swing.JLabel();
        parentLandFolioText = new javax.swing.JTextField();
        addLocalAuthorityButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        newTitleLabel.setFont(new java.awt.Font("Vani", 0, 24)); // NOI18N
        newTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newTitleLabel.setText("New Land");

        nameLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameLabel.setText("Name");

        nameText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        nameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextActionPerformed(evt);
            }
        });
        nameText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nameTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameTextKeyReleased(evt);
            }
        });

        localAuthorityLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        localAuthorityLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        localAuthorityLabel.setText("Local Authority");

        localAuthorityComboBox.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        localAuthorityComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        localAuthorityComboBox.setSelectedItem(null
        );
        localAuthorityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localAuthorityComboBoxActionPerformed(evt);
            }
        });
        localAuthorityComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                localAuthorityComboBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                localAuthorityComboBoxKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                localAuthorityComboBoxKeyTyped(evt);
            }
        });

        addVillageButton.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        addVillageButton.setText("Add Village");
        addVillageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVillageButtonActionPerformed(evt);
            }
        });
        addVillageButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addVillageButtonKeyPressed(evt);
            }
        });

        villageLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        villageLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        villageLabel.setText("Village");

        villageComboBox.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        villageComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        villageComboBox.setSelectedItem(null);
        villageComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                villageComboBoxActionPerformed(evt);
            }
        });
        villageComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                villageComboBoxKeyPressed(evt);
            }
        });

        extentLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        extentLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        extentLabel.setText("Extent");

        perchLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        perchLabel.setText("Perch");

        roodLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        roodLabel.setText("Rood");

        acreLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        acreLabel.setText("Acre");

        acreText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        acreText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        acreText.setText("0");
        acreText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acreTextActionPerformed(evt);
            }
        });
        acreText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                acreTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                acreTextFocusLost(evt);
            }
        });
        acreText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                acreTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                acreTextKeyReleased(evt);
            }
        });

        roodText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        roodText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        roodText.setText("0");
        roodText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roodTextActionPerformed(evt);
            }
        });
        roodText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                roodTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                roodTextFocusLost(evt);
            }
        });
        roodText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                roodTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                roodTextKeyReleased(evt);
            }
        });

        perchText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        perchText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        perchText.setText("0");
        perchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perchTextActionPerformed(evt);
            }
        });
        perchText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                perchTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                perchTextFocusLost(evt);
            }
        });
        perchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                perchTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                perchTextKeyReleased(evt);
            }
        });

        boundaryLabel.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        boundaryLabel.setText("Boundary :");

        northLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        northLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        northLabel.setText("North ");

        northText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        northText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                northTextActionPerformed(evt);
            }
        });
        northText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                northTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                northTextKeyReleased(evt);
            }
        });

        westText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        westText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                westTextActionPerformed(evt);
            }
        });
        westText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                westTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                westTextKeyReleased(evt);
            }
        });

        westLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        westLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        westLabel.setText("West");

        eastLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        eastLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        eastLabel.setText("East");

        eastText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        eastText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eastTextActionPerformed(evt);
            }
        });
        eastText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                eastTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                eastTextKeyReleased(evt);
            }
        });

        southText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        southText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                southTextActionPerformed(evt);
            }
        });
        southText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                southTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                southTextKeyReleased(evt);
            }
        });

        southLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        southLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        southLabel.setText("South");

        lotNoLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        lotNoLabel.setText("  Lot No");

        lotNoText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        lotNoText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lotNoTextActionPerformed(evt);
            }
        });
        lotNoText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lotNoTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lotNoTextKeyReleased(evt);
            }
        });

        saveButton.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/images/document-save-5.png"))); // NOI18N
        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Verdana", 0, 17)); // NOI18N
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/images/edit-delete-7.png"))); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        volumeLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        volumeLabel.setText("Volume");

        volumeText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        volumeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeTextActionPerformed(evt);
            }
        });
        volumeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                volumeTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                volumeTextKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        jLabel1.setText("Folio");

        folioText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        folioText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                folioTextActionPerformed(evt);
            }
        });
        folioText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                folioTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                folioTextKeyReleased(evt);
            }
        });

        splitedLandCheckBox.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        splitedLandCheckBox.setText("Splited Land");
        splitedLandCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitedLandCheckBoxActionPerformed(evt);
            }
        });
        splitedLandCheckBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                splitedLandCheckBoxKeyPressed(evt);
            }
        });

        splitedFromLabel.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        splitedFromLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        splitedFromLabel.setText("Splited From  :   Volume");
        splitedFromLabel.setEnabled(false);

        parentLandVolumeText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        parentLandVolumeText.setEnabled(false);
        parentLandVolumeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parentLandVolumeTextActionPerformed(evt);
            }
        });
        parentLandVolumeText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                parentLandVolumeTextKeyPressed(evt);
            }
        });

        parentLandFolioLable.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 16)); // NOI18N
        parentLandFolioLable.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        parentLandFolioLable.setText("Folio");
        parentLandFolioLable.setEnabled(false);

        parentLandFolioText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 15)); // NOI18N
        parentLandFolioText.setEnabled(false);
        parentLandFolioText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parentLandFolioTextActionPerformed(evt);
            }
        });
        parentLandFolioText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                parentLandFolioTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                parentLandFolioTextKeyReleased(evt);
            }
        });

        addLocalAuthorityButton.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        addLocalAuthorityButton.setText("Add L.Authority");
        addLocalAuthorityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLocalAuthorityButtonActionPerformed(evt);
            }
        });
        addLocalAuthorityButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addLocalAuthorityButtonKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout newLandPanelLayout = new javax.swing.GroupLayout(newLandPanel);
        newLandPanel.setLayout(newLandPanelLayout);
        newLandPanelLayout.setHorizontalGroup(
            newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newLandPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newLandPanelLayout.createSequentialGroup()
                        .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(newLandPanelLayout.createSequentialGroup()
                                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(newLandPanelLayout.createSequentialGroup()
                                        .addGap(70, 70, 70)
                                        .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(northLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(westLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(eastLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(southLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(boundaryLabel))
                                .addGap(5, 13, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newLandPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lotNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(volumeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)))
                        .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(westText)
                            .addComponent(northText)
                            .addComponent(eastText)
                            .addComponent(southText)
                            .addGroup(newLandPanelLayout.createSequentialGroup()
                                .addComponent(lotNoText, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newLandPanelLayout.createSequentialGroup()
                                .addComponent(acreText, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(acreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(roodText, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(roodLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(perchText, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(perchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newLandPanelLayout.createSequentialGroup()
                                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(newLandPanelLayout.createSequentialGroup()
                                        .addComponent(volumeText, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(folioText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newLandPanelLayout.createSequentialGroup()
                                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(23, 23, 23))))))
                    .addGroup(newLandPanelLayout.createSequentialGroup()
                        .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(villageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(localAuthorityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(extentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameText)
                            .addGroup(newLandPanelLayout.createSequentialGroup()
                                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(localAuthorityComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(villageComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addLocalAuthorityButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addVillageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newLandPanelLayout.createSequentialGroup()
                        .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(newLandPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(newTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(newLandPanelLayout.createSequentialGroup()
                                .addComponent(splitedFromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(parentLandVolumeText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(parentLandFolioLable, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(parentLandFolioText, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(newLandPanelLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(splitedLandCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        newLandPanelLayout.setVerticalGroup(
            newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newLandPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(splitedLandCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(splitedFromLabel)
                    .addComponent(parentLandVolumeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(parentLandFolioLable)
                    .addComponent(parentLandFolioText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(localAuthorityComboBox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addLocalAuthorityButton)
                        .addComponent(localAuthorityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(villageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addVillageButton)
                    .addComponent(villageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(perchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roodLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(acreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(acreText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roodText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(perchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boundaryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(northLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(northText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(westLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(westText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eastLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eastText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(southLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(southText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(folioText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volumeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volumeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lotNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lotNoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newLandPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addGap(3, 3, 3))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(newLandPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(newLandPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextActionPerformed
        localAuthorityComboBox.requestFocus();
    }//GEN-LAST:event_nameTextActionPerformed

    private void acreTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acreTextActionPerformed
        roodText.requestFocus();
    }//GEN-LAST:event_acreTextActionPerformed

    private void roodTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roodTextActionPerformed
        perchText.requestFocus();
    }//GEN-LAST:event_roodTextActionPerformed

    private void perchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perchTextActionPerformed
        northText.requestFocus();
    }//GEN-LAST:event_perchTextActionPerformed

    private void lotNoTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lotNoTextActionPerformed
        saveButton.doClick();
    }//GEN-LAST:event_lotNoTextActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String extentId = null;
        try {
            extentId = IdGen.getNextId("Extent", "ExtId", "Ex");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        }

        double perch = Double.parseDouble(perchText.getText());
        double acre = Double.parseDouble(acreText.getText());
        double rood = Double.parseDouble(roodText.getText());

        Extent extent = new Extent(extentId, perch, acre, rood);

        String boundaryId = null;
        try {
            boundaryId = IdGen.getNextId("Boundry", "boundryId", "B");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        }
        String north = northText.getText();
        String west = westText.getText();
        String east = eastText.getText();
        String south = southText.getText();

        Boundary boundary = new Boundary(boundaryId, north, west, east, south);

        Village village = new Village(villageComboBox.getSelectedItem().toString().split(" - ")[0], localAuthorityComboBox.getSelectedItem().toString().split(" - ")[0], villageComboBox.getSelectedItem().toString().split(" - ")[1]);
        String villageCode = village.getVillageCode();
        String name = nameText.getText();
        String lotNo = lotNoText.getText();
        String volume = volumeText.getText();
        int folio = Integer.parseInt(folioText.getText());
        if (!splitedLandCheckBox.isSelected()) {
            Land land = new Land(villageCode, landCode, name, lotNo, volume, folio);
            Plan plan = new Plan();
            try {
                if (LandController.addLand(land, village, extent, boundary, plan) > 0) {
                    JLabel messageLabel = new JLabel("Saved Successfully..");
                    messageLabel.setFont(new Font("High Tower Text", Font.PLAIN, 18));
                    JOptionPane.showMessageDialog(this, messageLabel, "", JOptionPane.INFORMATION_MESSAGE);
                    setTextFieldsEmpty();
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                String parentLand = LandController.getLandInfo(parentLandVolumeText.getText(), Integer.parseInt(parentLandFolioText.getText())).get(10);
                Land land = new Land(villageCode, landCode, name, lotNo, volume, folio, parentLand);
                if (LandController.addLand(land, village, extent, boundary, null) > 0) {
                    JLabel messageLabel = new JLabel("Saved Successfully..");
                    messageLabel.setFont(new Font("High Tower Text", Font.PLAIN, 18));
                    JOptionPane.showMessageDialog(this, messageLabel, "", JOptionPane.INFORMATION_MESSAGE);
                    setTextFieldsEmpty();
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        try {
            landCode = IdGen.getNextId("Land", "landCode", "L");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (dialog != null) {
            dialog.setVolumeAndFolio(volume, ("" + folio));
            this.dispose();
        }

    }//GEN-LAST:event_saveButtonActionPerformed

    private void villageComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_villageComboBoxActionPerformed
//        try {
//            LocalAuthority localAuthority = LocalAuthorityController.getLocalAuthority(villageComboBox.getSelectedItem().toString().split(" - ")[0]);
//            localAuthorityComboBox.setSelectedItem(localAuthority);
//        } catch (SQLException ex) {
//            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_villageComboBoxActionPerformed

    private void westTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_westTextActionPerformed
        eastText.requestFocus();
    }//GEN-LAST:event_westTextActionPerformed

    private void northTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_northTextActionPerformed
        westText.requestFocus();
    }//GEN-LAST:event_northTextActionPerformed

    private void eastTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eastTextActionPerformed
        southText.requestFocus();
    }//GEN-LAST:event_eastTextActionPerformed

    private void southTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_southTextActionPerformed
        volumeText.requestFocus();
    }//GEN-LAST:event_southTextActionPerformed

    private void volumeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeTextActionPerformed
        folioText.requestFocus();
    }//GEN-LAST:event_volumeTextActionPerformed

    private void folioTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_folioTextActionPerformed
        lotNoText.requestFocus();
    }//GEN-LAST:event_folioTextActionPerformed

    private void localAuthorityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localAuthorityComboBoxActionPerformed
        try {
            Vector<Village> villages = VillageController.getVillages(localAuthorityComboBox.getSelectedItem().toString().split(" - ")[0]);
            villageComboBox.setModel(new DefaultComboBoxModel(villages));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
        }

//        System.out.println(localAuthorityComboBox.getSelectedItem());
    }//GEN-LAST:event_localAuthorityComboBoxActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addVillageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVillageButtonActionPerformed
        new AddVillage(this, true).show();
    }//GEN-LAST:event_addVillageButtonActionPerformed

    private void localAuthorityComboBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_localAuthorityComboBoxKeyReleased
    }//GEN-LAST:event_localAuthorityComboBoxKeyReleased

    private void localAuthorityComboBoxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_localAuthorityComboBoxKeyTyped
    }//GEN-LAST:event_localAuthorityComboBoxKeyTyped

    private void acreTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_acreTextKeyReleased
        String text = acreText.getText();
        try {
            if (!Validation.validateInt(text)) {
                acreText.setText(text.substring(0, text.length() - 1));
            }
        } catch (Exception e) {
        }
        setSaveButtonEnable();
    }//GEN-LAST:event_acreTextKeyReleased

    private void roodTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roodTextKeyReleased
        String text = roodText.getText();
        try {
            if (!Validation.validateInt(text)) {
                roodText.setText(text.substring(0, text.length() - 1));
            }
        } catch (Exception e) {
        }
        setSaveButtonEnable();
        System.out.println(villageComboBox.getSelectedItem());
    }//GEN-LAST:event_roodTextKeyReleased

    private void perchTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_perchTextKeyReleased
        String text = perchText.getText();
        try {
            if (!Validation.validateInt(text)) {
                int caretPosition = perchText.getCaretPosition();
                perchText.setText(text.substring(0, caretPosition - 1) + "" + text.substring(caretPosition));
                perchText.setCaretPosition(caretPosition - 1);
            }
        } catch (Exception e) {
        }
        setSaveButtonEnable();
    }//GEN-LAST:event_perchTextKeyReleased

    private void nameTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextKeyReleased
        String text = nameText.getText();
        try {
            if (!Validation.validateName(text)) {
                int caretPosition = nameText.getCaretPosition();
                nameText.setText(text.substring(0, caretPosition - 1) + "" + text.substring(caretPosition));
                nameText.setCaretPosition(caretPosition - 1);
            }
        } catch (Exception e) {
        }
        setSaveButtonEnable();
    }//GEN-LAST:event_nameTextKeyReleased

    private void folioTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_folioTextKeyReleased
        String text = folioText.getText();
        try {
            if (!Validation.validateInt(text)) {
                int caretPosition = folioText.getCaretPosition();
                folioText.setText(text.substring(0, caretPosition - 1) + "" + text.substring(caretPosition));
                folioText.setCaretPosition(caretPosition - 1);
            }
        } catch (Exception e) {
        }
        setSaveButtonEnable();
    }//GEN-LAST:event_folioTextKeyReleased

    private void northTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_northTextKeyReleased
        setSaveButtonEnable();
    }//GEN-LAST:event_northTextKeyReleased

    private void eastTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eastTextKeyReleased
        setSaveButtonEnable();
    }//GEN-LAST:event_eastTextKeyReleased

    private void westTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_westTextKeyReleased
        setSaveButtonEnable();
    }//GEN-LAST:event_westTextKeyReleased

    private void southTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_southTextKeyReleased
        setSaveButtonEnable();
    }//GEN-LAST:event_southTextKeyReleased

    private void volumeTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_volumeTextKeyReleased
        setSaveButtonEnable();
    }//GEN-LAST:event_volumeTextKeyReleased

    private void acreTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_acreTextFocusLost
        if (acreText.getText().equals("")) {
            acreText.setText("0");
        }
    }//GEN-LAST:event_acreTextFocusLost

    private void roodTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roodTextFocusLost
        if (roodText.getText().equals("")) {
            roodText.setText("0");
        }
    }//GEN-LAST:event_roodTextFocusLost

    private void perchTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_perchTextFocusLost
        if (perchText.getText().equals("")) {
            perchText.setText("0");
        }
    }//GEN-LAST:event_perchTextFocusLost

    private void acreTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_acreTextFocusGained
        acreText.setText("");
    }//GEN-LAST:event_acreTextFocusGained

    private void roodTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roodTextFocusGained
        roodText.setText("");
    }//GEN-LAST:event_roodTextFocusGained

    private void perchTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_perchTextFocusGained
        perchText.setText("");
    }//GEN-LAST:event_perchTextFocusGained

    private void lotNoTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lotNoTextKeyReleased
    }//GEN-LAST:event_lotNoTextKeyReleased

    private void splitedLandCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitedLandCheckBoxActionPerformed
        if (splitedLandCheckBox.isSelected()) {
            splitedFromLabel.setEnabled(true);
            parentLandFolioLable.setEnabled(true);
            parentLandFolioText.setEnabled(true);
            parentLandVolumeText.setEnabled(true);
            villageComboBox.setEnabled(false);
            localAuthorityComboBox.setEnabled(false);
            addVillageButton.setEnabled(false);
            addLocalAuthorityButton.setEnabled(false);
            parentLandVolumeText.requestFocus();
        } else {
            splitedFromLabel.setEnabled(false);
            parentLandFolioLable.setEnabled(false);
            parentLandFolioText.setEnabled(false);
            parentLandVolumeText.setEnabled(false);
            villageComboBox.setEnabled(true);
            localAuthorityComboBox.setEnabled(true);
            addVillageButton.setEnabled(true);
            addLocalAuthorityButton.setEnabled(true);
            nameText.requestFocus();
        }
    }//GEN-LAST:event_splitedLandCheckBoxActionPerformed

    private void parentLandVolumeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parentLandVolumeTextActionPerformed
        parentLandFolioText.requestFocus();
    }//GEN-LAST:event_parentLandVolumeTextActionPerformed

    private void parentLandFolioTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parentLandFolioTextActionPerformed
        try {
            String villageCode = LandController.getVillageCodeOfLand(parentLandVolumeText.getText(), Integer.parseInt(parentLandFolioText.getText()));
            LocalAuthority localAuthorityOfVillage = LocalAuthorityController.getLocalAuthorityOfVillage(villageCode);
            int itemCount = localAuthorityComboBox.getItemCount();
            for (int i = 0; i < itemCount; i++) {
                if (localAuthorityComboBox.getItemAt(i).toString().split(" - ")[0].equals(localAuthorityOfVillage.getAuthorityCode())) {
                    localAuthorityComboBox.setSelectedIndex(i);
                    break;
                }
            }
            itemCount = villageComboBox.getItemCount();
            for (int i = 0; i < itemCount; i++) {
                if (villageComboBox.getItemAt(i).toString().split(" - ")[0].equals(villageCode)) {
                    villageComboBox.setSelectedIndex(i);
                    break;
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        }


        nameText.requestFocus();
    }//GEN-LAST:event_parentLandFolioTextActionPerformed

    private void parentLandFolioTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_parentLandFolioTextKeyReleased
        try {
            String text = folioText.getText();
            if (!Validation.validateInt(text)) {
                int caretPosition = folioText.getCaretPosition();
                folioText.setText(text.substring(0, caretPosition - 1) + "" + text.substring(caretPosition));
                folioText.setCaretPosition(caretPosition - 1);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_parentLandFolioTextKeyReleased

    private void addLocalAuthorityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLocalAuthorityButtonActionPerformed
        new AddLocalAuthority(this, true).show();
    }//GEN-LAST:event_addLocalAuthorityButtonActionPerformed

    private void localAuthorityComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_localAuthorityComboBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            addLocalAuthorityButton.requestFocus();
        }
    }//GEN-LAST:event_localAuthorityComboBoxKeyPressed

    private void addLocalAuthorityButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addLocalAuthorityButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            localAuthorityComboBox.requestFocus();
        }
    }//GEN-LAST:event_addLocalAuthorityButtonKeyPressed

    private void nameTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            splitedLandCheckBox.requestFocus();
        }

        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            if (parentLandFolioText.isEnabled()) {
                parentLandFolioText.requestFocus();
            }
        }
    }//GEN-LAST:event_nameTextKeyPressed

    private void splitedLandCheckBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_splitedLandCheckBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            splitedLandCheckBox.doClick();
        }
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            nameText.requestFocus();
        }
    }//GEN-LAST:event_splitedLandCheckBoxKeyPressed

    private void parentLandVolumeTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_parentLandVolumeTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            splitedLandCheckBox.requestFocus();
        }
    }//GEN-LAST:event_parentLandVolumeTextKeyPressed

    private void parentLandFolioTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_parentLandFolioTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            parentLandVolumeText.requestFocus();
        }
    }//GEN-LAST:event_parentLandFolioTextKeyPressed

    private void villageComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_villageComboBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            addVillageButton.requestFocus();
        }

    }//GEN-LAST:event_villageComboBoxKeyPressed

    private void addVillageButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addVillageButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            villageComboBox.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addVillageButton.doClick();
        }
    }//GEN-LAST:event_addVillageButtonKeyPressed

    private void acreTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_acreTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            villageComboBox.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            addVillageButton.requestFocus();
        }
    }//GEN-LAST:event_acreTextKeyPressed

    private void roodTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roodTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            acreText.requestFocus();
        }
    }//GEN-LAST:event_roodTextKeyPressed

    private void perchTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_perchTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            roodText.requestFocus();
        }
    }//GEN-LAST:event_perchTextKeyPressed

    private void northTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_northTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            perchText.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            perchText.requestFocus();
        }
    }//GEN-LAST:event_northTextKeyPressed

    private void westTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_westTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            northText.requestFocus();
        }
    }//GEN-LAST:event_westTextKeyPressed

    private void eastTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eastTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            westText.requestFocus();
        }
    }//GEN-LAST:event_eastTextKeyPressed

    private void southTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_southTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            eastText.requestFocus();
        }
    }//GEN-LAST:event_southTextKeyPressed

    private void volumeTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_volumeTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            southText.requestFocus();
        }
    }//GEN-LAST:event_volumeTextKeyPressed

    private void folioTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_folioTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            volumeText.requestFocus();
        }
    }//GEN-LAST:event_folioTextKeyPressed

    private void lotNoTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lotNoTextKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            folioText.requestFocus();
        }
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            folioText.requestFocus();
        }
    }//GEN-LAST:event_lotNoTextKeyPressed

    public void initComboBoxes() {
        try {
            villageComboBoxModel = new DefaultComboBoxModel(VillageController.getVillages().toArray());
            villageComboBoxModel.setSelectedItem(null);
            villageComboBox.setModel(villageComboBoxModel);
            localAuthorityComboBoxModel = new DefaultComboBoxModel(LocalAuthorityController.getLocalAuthorityies());
            localAuthorityComboBoxModel.setSelectedItem(null);
            localAuthorityComboBox.setModel(localAuthorityComboBoxModel);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AddLand.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setSaveButtonEnable() {
        if ((nameText.getText().equals("") || acreText.getText().equals("") || roodText.getText().equals("")
                || perchText.getText().equals("") || northText.getText().equals("") || westText.getText().equals("") || eastText.getText().equals("")
                || southText.getText().equals("") || volumeText.getText().equals("") || folioText.getText().equals(""))) {
            saveButton.setEnabled(false);
        } else {
            saveButton.setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddLand.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddLand.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddLand.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddLand.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                AddLand dialog = new AddLand(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel acreLabel;
    private javax.swing.JTextField acreText;
    private javax.swing.JButton addLocalAuthorityButton;
    private javax.swing.JButton addVillageButton;
    private javax.swing.JLabel boundaryLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel eastLabel;
    private javax.swing.JTextField eastText;
    private javax.swing.JLabel extentLabel;
    private javax.swing.JTextField folioText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox localAuthorityComboBox;
    private javax.swing.JLabel localAuthorityLabel;
    private javax.swing.JLabel lotNoLabel;
    private javax.swing.JTextField lotNoText;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JPanel newLandPanel;
    private javax.swing.JLabel newTitleLabel;
    private javax.swing.JLabel northLabel;
    private javax.swing.JTextField northText;
    private javax.swing.JLabel parentLandFolioLable;
    private javax.swing.JTextField parentLandFolioText;
    private javax.swing.JTextField parentLandVolumeText;
    private javax.swing.JLabel perchLabel;
    private javax.swing.JTextField perchText;
    private javax.swing.JLabel roodLabel;
    private javax.swing.JTextField roodText;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel southLabel;
    private javax.swing.JTextField southText;
    private javax.swing.JLabel splitedFromLabel;
    private javax.swing.JCheckBox splitedLandCheckBox;
    private javax.swing.JComboBox villageComboBox;
    private javax.swing.JLabel villageLabel;
    private javax.swing.JLabel volumeLabel;
    private javax.swing.JTextField volumeText;
    private javax.swing.JLabel westLabel;
    private javax.swing.JTextField westText;
    // End of variables declaration//GEN-END:variables

    private void setTextFieldsEmpty() {
        nameText.setText("");
        lotNoText.setText("");
        volumeText.setText("");
        folioText.setText("");
        northText.setText("");
        eastText.setText("");
        westText.setText("");
        southText.setText("");
        perchText.setText("0");
        acreText.setText("0");
        roodText.setText("0");
        if (splitedLandCheckBox.isSelected()) {
            splitedLandCheckBox.doClick();
        }
        parentLandFolioText.setText("");
        parentLandVolumeText.setText("");
        nameText.requestFocus();
    }
}